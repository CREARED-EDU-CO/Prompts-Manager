/*
 * Este archivo es parte del proyecto Prompts-Manager.
 *
 * Copyright (C) 2025 CREARED.EDU.CO
 *
 * Este programa es software libre: puedes redistribuirlo y/o modificarlo 
 * bajo los términos de la Licencia Pública General Affero de GNU publicada 
 * por la Free Software Foundation, ya sea la versión 3 de la Licencia, 
 * o (a tu elección) cualquier versión posterior.
 *
 * Este programa se distribuye con la esperanza de que sea útil, 
 * pero SIN NINGUNA GARANTÍA; sin incluso la garantía implícita de 
 * COMERCIABILIDAD o IDONEIDAD PARA UN PROPÓSITO PARTICULAR. 
 * Consulta la Licencia Pública General Affero de GNU para más detalles.
 *
 * Deberías haber recibido una copia de la Licencia Pública General Affero de GNU 
 * junto con este programa. En caso contrario, consulta <https://www.gnu.org/licenses/agpl-3.0.html>.
 */

/* 
  CLASES UTILITARIAS CSS: Sistema atómico de utilidades para manipulación rápida del DOM
  PATRÓN ATOMIC CSS: Clases de propósito único para composición flexible
  PERFORMANCE: Reutilización máxima de estilos, reducción de CSS duplicado
  MANTENIBILIDAD: Separación de concerns entre layout y componentes
  METODOLOGÍA: Inspirado en Tailwind CSS y sistemas de design utilitarios
*/

/* 
  UTILIDADES DE DISPLAY: Control de rendering y layout context
  COMPORTAMIENTO: Modifican el display type del elemento y su participación en layout
  ACCESIBILIDAD: .hidden preserva elemento en DOM pero lo oculta de screen readers
  PERFORMANCE: .visible fuerza block display para elementos previamente ocultos
*/
.hidden { display: none; }           /* Oculta elemento completamente - No ocupa espacio, no accesible */
.visible { display: block; }         /* Fuerza display block - Restaura visibilidad de elementos ocultos */
.flex { display: flex; }             /* Establece flex container - Habilita flexbox layout */
.inline-flex { display: inline-flex; } /* Flex inline - Flexbox que fluye con texto */
.grid { display: grid; }             /* Establece grid container - Habilita CSS Grid layout */
.inline-grid { display: inline-grid; } /* Grid inline - CSS Grid que fluye con texto */

/* 
  UTILIDADES TIPOGRÁFICAS: Control de alineación y comportamiento de texto
  LAYOUT: Modifican el flujo y posicionamiento del contenido textual
  RESPONSIVE: Aplicables en diferentes breakpoints para adaptabilidad
  ACCESIBILIDAD: text-justify mejora legibilidad en bloques de texto largos
*/
.text-center { text-align: center; }   /* Centrado horizontal - Títulos, elementos destacados */
.text-left { text-align: left; }       /* Alineación izquierda - Texto de lectura, contenido principal */
.text-right { text-align: right; }     /* Alineación derecha - Metadatos, información secundaria */
.text-justify { text-align: justify; } /* Justificación completa - Bloques de texto largos */

/* 
  CONTROL DE OVERFLOW TEXTUAL: Manejo de contenido que excede contenedor
  PATRÓN TRUNCATE: Combinación de propiedades para ellipsis (...) automático
  UX: Previene layout breaking por contenido dinámico excesivo
  PERFORMANCE: Evita reflows por contenido variable
*/
.text-truncate { 
  overflow: hidden;        /* Oculta contenido desbordante */
  text-overflow: ellipsis; /* Muestra "..." al final del texto truncado */
  white-space: nowrap;     /* Previene line wrapping, fuerza single line */
}

/* 
  CONTROL DE WHITE-SPACE: Manejo de saltos de línea y espaciado
  COMPORTAMIENTO: Modifica cómo el navegador procesa espacios y line breaks
*/
.text-wrap { white-space: normal; }    /* Wrapping normal - Permite saltos de línea automáticos */
.text-nowrap { white-space: nowrap; }  /* Sin wrapping - Fuerza contenido en una sola línea */

/* 
  SISTEMA DE ESPACIADO UTILITARIO: Control granular de margin y padding
  NOMENCLATURA: Basada en Tailwind CSS para consistencia y familiaridad
  ESCALADO: Utiliza design tokens (--spacing-*) para coherencia visual
  BOX MODEL: Manipulación precisa del modelo de caja CSS
*/

/* 
  RESET DE ESPACIADO: Eliminación de márgenes y padding por defecto
  NORMALIZACIÓN: Útil para resetear estilos heredados del navegador
  CONTROL: Punto de partida limpio para aplicar espaciado intencional
*/
.m-0 { margin: 0; }                    /* Reset margin completo - Elimina todos los márgenes */
.p-0 { padding: 0; }                   /* Reset padding completo - Elimina todo el padding interno */

/* 
  CENTRADO AUTOMÁTICO: Utiliza margin auto para centrado horizontal/vertical
  FLEXBOX ALTERNATIVE: Centrado sin necesidad de flex container
  RESPONSIVE: Funciona en cualquier contexto de layout
*/
.m-auto { margin: auto; }              /* Centrado completo - Margin auto en todas las direcciones */
.mx-auto { margin-left: auto; margin-right: auto; } /* Centrado horizontal - Auto en eje X */
.my-auto { margin-top: auto; margin-bottom: auto; } /* Centrado vertical - Auto en eje Y */

/* 
  MÁRGENES DIRECCIONALES: Espaciado externo con design tokens
  ESCALA: Nivel 1 (xs) y 2 (sm) para espaciado fino y estándar
  DIRECCIONES: top, bottom, left, right para control preciso
  CONSISTENCIA: Valores vinculados a sistema de espaciado global
*/
.mt-1 { margin-top: var(--spacing-xs); }    /* Margen superior mínimo - 4.8px */
.mb-1 { margin-bottom: var(--spacing-xs); } /* Margen inferior mínimo - 4.8px */
.ml-1 { margin-left: var(--spacing-xs); }   /* Margen izquierdo mínimo - 4.8px */
.mr-1 { margin-right: var(--spacing-xs); }  /* Margen derecho mínimo - 4.8px */
.mt-2 { margin-top: var(--spacing-sm); }    /* Margen superior pequeño - 8px */
.mb-2 { margin-bottom: var(--spacing-sm); } /* Margen inferior pequeño - 8px */
.ml-2 { margin-left: var(--spacing-sm); }   /* Margen izquierdo pequeño - 8px */
.mr-2 { margin-right: var(--spacing-sm); }  /* Margen derecho pequeño - 8px */

/* 
  PADDING UTILITARIO: Espaciado interno con design tokens
  APLICACIÓN: Espaciado interno uniforme o direccional
  COMPOSICIÓN: Combinable con otras utilidades para layouts complejos
*/
.p-1 { padding: var(--spacing-xs); }        /* Padding uniforme mínimo - 4.8px en todas las direcciones */
.p-2 { padding: var(--spacing-sm); }        /* Padding uniforme pequeño - 8px en todas las direcciones */

/* 
  PADDING AXIAL: Control de padding en ejes específicos
  EJE X: padding-left + padding-right para espaciado horizontal
  EJE Y: padding-top + padding-bottom para espaciado vertical
  EFICIENCIA: Menos declaraciones CSS que propiedades individuales
*/
.px-1 { padding-left: var(--spacing-xs); padding-right: var(--spacing-xs); }   /* Padding horizontal mínimo */
.py-1 { padding-top: var(--spacing-xs); padding-bottom: var(--spacing-xs); }   /* Padding vertical mínimo */
.px-2 { padding-left: var(--spacing-sm); padding-right: var(--spacing-sm); }   /* Padding horizontal pequeño */
.py-2 { padding-top: var(--spacing-sm); padding-bottom: var(--spacing-sm); }   /* Padding vertical pequeño */

/* 
  UTILIDADES FLEXBOX: Control completo del layout flexible
  FLEXBOX MODEL: Manipulación de flex container y flex items
  RESPONSIVE: Aplicables en diferentes breakpoints para layouts adaptativos
  COMPOSICIÓN: Combinables para crear layouts complejos sin CSS custom
*/

/* 
  DIRECCIÓN DEL FLEX CONTAINER: Control del eje principal de layout
  MAIN AXIS: Determina si los flex items se alinean horizontal o verticalmente
  CROSS AXIS: Automáticamente perpendicular al main axis
*/
.flex-col { flex-direction: column; }  /* Dirección vertical - Items apilados de arriba a abajo */
.flex-row { flex-direction: row; }     /* Dirección horizontal - Items alineados de izquierda a derecha */

/* 
  CONTROL DE WRAPPING: Comportamiento cuando flex items exceden el contenedor
  RESPONSIVE: flex-wrap permite layouts que se adaptan al espacio disponible
  PERFORMANCE: flex-nowrap previene reflows por contenido dinámico
*/
.flex-wrap { flex-wrap: wrap; }        /* Permite wrapping - Items saltan a nueva línea si es necesario */
.flex-nowrap { flex-wrap: nowrap; }    /* Sin wrapping - Items se comprimen para caber en una línea */

/* 
  JUSTIFICACIÓN EN MAIN AXIS: Distribución de espacio entre flex items
  ALGORITMO: Controla cómo se distribuye el espacio libre en el eje principal
  LAYOUT PATTERNS: Implementa patrones comunes de distribución espacial
*/
.justify-center { justify-content: center; }         /* Centrado en main axis - Items agrupados al centro */
.justify-between { justify-content: space-between; } /* Espacio entre items - Primer y último item en extremos */
.justify-around { justify-content: space-around; }   /* Espacio alrededor - Espacio igual alrededor de cada item */

/* 
  ALINEACIÓN EN CROSS AXIS: Posicionamiento perpendicular al main axis
  VERTICAL ALIGNMENT: En flex-row, controla alineación vertical
  HORIZONTAL ALIGNMENT: En flex-col, controla alineación horizontal
*/
.items-center { align-items: center; }     /* Centrado en cross axis - Items centrados perpendicularmente */
.items-start { align-items: flex-start; }  /* Inicio de cross axis - Items alineados al inicio */
.items-end { align-items: flex-end; }      /* Final de cross axis - Items alineados al final */

/* 
  PROPIEDADES DE FLEX ITEMS: Control individual de comportamiento flexible
  FLEX SHORTHAND: Combinación de flex-grow, flex-shrink, flex-basis
  RESPONSIVE: Permite items que se adaptan dinámicamente al espacio
*/
.flex-1 { flex: 1; }                       /* Crecimiento flexible - Item toma todo el espacio disponible */
.flex-shrink-0 { flex-shrink: 0; }         /* Sin contracción - Item mantiene su tamaño mínimo */

/* 
  UTILIDADES DE OPTIMIZACIÓN DE PERFORMANCE: Hints para el motor de rendering
  COMPOSITING: Promoción a composite layer para hardware acceleration
  PAINT OPTIMIZATION: Reducción de repaints y reflows costosos
  BROWSER HINTS: Indicaciones al navegador sobre propiedades que cambiarán
  CRITICAL PERFORMANCE: Aplicar solo cuando sea necesario para evitar overhead
*/

/* 
  WILL-CHANGE HINTS: Notifica al navegador sobre propiedades que cambiarán
  COMPOSITE LAYER: Promueve elemento a layer separado para optimización
  MEMORY TRADE-OFF: Usa más memoria GPU pero mejora performance de animaciones
  CLEANUP: Debe removerse cuando la animación termine para liberar recursos
*/
.will-change-transform { will-change: transform; }     /* Hint para transformaciones - Optimiza translate, rotate, scale */
.will-change-opacity { will-change: opacity; }         /* Hint para cambios de opacidad - Optimiza fade in/out */
.will-change-scroll { will-change: scroll-position; }  /* Hint para scroll - Optimiza scroll smooth y parallax */

/* 
  HARDWARE ACCELERATION FORZADA: Promoción manual a composite layer
  HACK CLÁSICO: translateZ(0) fuerza creación de layer 3D
  GPU COMPOSITING: Mueve rendering del elemento a GPU
  SIDE EFFECTS: Puede causar blurry text en algunos navegadores
*/
.gpu-accelerated { transform: translateZ(0); }         /* Fuerza GPU layer - Hack para hardware acceleration */

/* 
  CSS CONTAINMENT: Aislamiento de rendering para performance
  LAYOUT CONTAINMENT: Previene que cambios internos afecten layout externo
  PAINT CONTAINMENT: Aísla repaints dentro del contenedor
  SIZE CONTAINMENT: Fija dimensiones para evitar recálculos de layout
*/
.contain-layout { contain: layout; }                   /* Contención de layout - Aísla cambios de layout internos */
.contain-paint { contain: paint; }                     /* Contención de paint - Aísla repaints dentro del elemento */
.contain-size { contain: size; }                       /* Contención de tamaño - Fija dimensiones del contenedor */

/* 
  CONTENT VISIBILITY: Optimización de rendering para contenido off-screen
  LAZY RENDERING: Solo renderiza contenido visible en viewport
  PERFORMANCE BOOST: Mejora significativa en páginas con mucho contenido
  EXPERIMENTAL: Soporte limitado, usar con feature detection
*/
.content-visibility-auto { content-visibility: auto; } /* Renderizado lazy - Solo renderiza contenido visible */

/* 
  UTILIDADES DE TRANSICIÓN: Animaciones suaves para micro-interacciones
  TIMING: Utiliza design tokens para consistencia temporal
  PERFORMANCE: Transiciones específicas son más eficientes que 'all'
  UX: Proporciona feedback visual inmediato para interacciones del usuario
*/

/* 
  TRANSICIÓN UNIVERSAL: Anima todas las propiedades CSS que cambien
  PERFORMANCE WARNING: Costosa computacionalmente, usar con moderación
  DEBUGGING: Útil para prototipado rápido, evitar en producción
*/
.transition-all { transition: all var(--transition-normal); }

/* 
  TRANSICIONES ESPECÍFICAS: Optimizadas para propiedades individuales
  COMPOSITE PROPERTIES: opacity y transform son baratas de animar
  GPU ACCELERATION: Estas propiedades no causan layout/paint
*/
.transition-opacity { transition: opacity var(--transition-fast); }       /* Transición de opacidad - Fade in/out suave */
.transition-transform { transition: transform var(--transition-fast); }   /* Transición de transformación - Movimiento/escala suave */

/* 
  TRANSICIÓN DE COLORES: Cambios cromáticos suaves para theming
  MULTIPLE PROPERTIES: Anima color, background-color, border-color simultáneamente
  THEMING: Esencial para transiciones suaves entre tema claro/oscuro
*/
.transition-colors { 
  transition: color var(--transition-fast), 
              background-color var(--transition-fast), 
              border-color var(--transition-fast); 
}

/* 
  UTILIDADES DE POSICIONAMIENTO: Control del positioning context
  STACKING CONTEXT: Establece nuevos contextos de apilamiento
  LAYOUT FLOW: Modifica cómo los elementos participan en el document flow
  RESPONSIVE: Aplicables condicionalmente según breakpoint
*/

/* 
  ESQUEMAS DE POSICIONAMIENTO CSS: Diferentes modelos de posicionamiento
  DOCUMENT FLOW: Algunos valores sacan el elemento del flujo normal
  CONTAINING BLOCK: Cada tipo establece diferente referencia para positioning
*/
.relative { position: relative; }  /* Posicionamiento relativo - Offset desde posición normal, mantiene espacio */
.absolute { position: absolute; }  /* Posicionamiento absoluto - Relativo al ancestor positioned más cercano */
.fixed { position: fixed; }        /* Posicionamiento fijo - Relativo al viewport, no scrollea */
.sticky { position: sticky; }      /* Posicionamiento pegajoso - Híbrido relative/fixed según scroll */
.static { position: static; }      /* Posicionamiento estático - Comportamiento normal, ignora top/left/etc */

/* 
  CONTROL DE OVERFLOW: Manejo de contenido que excede el contenedor
  SCROLLING: Determina si aparecen scrollbars cuando el contenido desborda
  CLIPPING: overflow: hidden corta contenido sin mostrar scrollbars
  PERFORMANCE: overflow: hidden puede mejorar performance al evitar scroll layers
*/
.overflow-hidden { overflow: hidden; }     /* Oculta overflow - Corta contenido desbordante sin scrollbars */
.overflow-auto { overflow: auto; }         /* Scrollbars automáticos - Aparecen solo cuando es necesario */
.overflow-scroll { overflow: scroll; }     /* Scrollbars siempre - Visibles aunque no haya overflow */
.overflow-x-hidden { overflow-x: hidden; } /* Oculta overflow horizontal - Solo eje X */
.overflow-y-hidden { overflow-y: hidden; } /* Oculta overflow vertical - Solo eje Y */

/* 
  SISTEMA DE Z-INDEX: Control de apilamiento en el eje Z
  STACKING ORDER: Valores más altos aparecen encima de valores menores
  ESCALA: Incrementos de 10 para permitir valores intermedios
  JERARQUÍA: 0 (base) < 10 (elementos) < 20 (dropdowns) < 30 (modals) < 40 (tooltips) < 50 (overlays)
*/
.z-0 { z-index: 0; }    /* Nivel base - Elementos en flujo normal */
.z-10 { z-index: 10; }  /* Nivel bajo - Elementos ligeramente elevados */
.z-20 { z-index: 20; }  /* Nivel medio-bajo - Dropdowns, menus */
.z-30 { z-index: 30; }  /* Nivel medio - Modales, dialogs */
.z-40 { z-index: 40; }  /* Nivel alto - Tooltips, popovers */
.z-50 { z-index: 50; }  /* Nivel máximo - Overlays críticos, loading screens */

/* 
  UTILIDADES DE DIMENSIONADO: Control de width, height y constraints
  RESPONSIVE: Dimensiones relativas que se adaptan al contenedor padre
  INTRINSIC SIZING: Valores auto respetan el tamaño natural del contenido
  CONSTRAINTS: min/max establecen límites para comportamiento responsive
*/

/* 
  DIMENSIONES COMPLETAS: Ocupan todo el espacio disponible del contenedor
  RESPONSIVE: Se adaptan automáticamente al tamaño del padre
  LAYOUT: Útiles para crear layouts que llenan completamente su contenedor
*/
.w-full { width: 100%; }           /* Ancho completo - Ocupa todo el ancho del contenedor padre */
.h-full { height: 100%; }          /* Alto completo - Ocupa todo el alto del contenedor padre */

/* 
  DIMENSIONADO AUTOMÁTICO: Respeta el tamaño intrínseco del contenido
  CONTENT-BASED: Dimensiones determinadas por el contenido interno
  FLEXIBILITY: Permite que el elemento se ajuste naturalmente
*/
.w-auto { width: auto; }           /* Ancho automático - Determinado por contenido y contexto */
.h-auto { height: auto; }          /* Alto automático - Determinado por contenido interno */

/* 
  CONSTRAINTS DE DIMENSIONADO: Límites mínimos y máximos
  FLEXBOX FIX: min-height: 0 soluciona problemas de flex items que no se contraen
  RESPONSIVE: max-width: 100% previene overflow horizontal
*/
.min-h-0 { min-height: 0; }        /* Altura mínima cero - Permite contracción total en flexbox */
.max-w-full { max-width: 100%; }   /* Ancho máximo completo - Previene overflow horizontal */

/* 
  SCREEN READER ONLY: Oculta visualmente pero mantiene accesibilidad
  TÉCNICA ESTÁNDAR: Patrón establecido para contenido solo para screen readers
  ACCESIBILIDAD: Elemento invisible pero accesible para tecnologías asistivas
  CLIP LEGACY: clip: rect() para compatibilidad con navegadores antiguos
*/
.sr-only {
  position: absolute;      /* Saca del flujo normal */
  width: 1px;             /* Dimensiones mínimas para existir en DOM */
  height: 1px;            /* Altura mínima detectable */
  padding: 0;             /* Sin padding interno */
  margin: -1px;           /* Margin negativo para ocultar completamente */
  overflow: hidden;       /* Oculta cualquier contenido desbordante */
  clip: rect(0, 0, 0, 0); /* Clipping legacy para navegadores antiguos */
  white-space: nowrap;    /* Previene line wrapping */
  border: 0;              /* Sin bordes visibles */
}

/* 
  UTILIDADES DE CURSOR: Feedback visual para interactividad
  UX: Comunica al usuario qué elementos son interactivos
  ESTADOS: Diferentes cursors para diferentes tipos de interacción
*/
.cursor-pointer { cursor: pointer; }         /* Cursor de mano - Indica elemento clickeable */
.cursor-not-allowed { cursor: not-allowed; } /* Cursor prohibido - Indica acción no disponible */
.cursor-default { cursor: default; }         /* Cursor por defecto - Resetea cursor personalizado */

/* 
  CONTROL DE SELECCIÓN DE TEXTO: Comportamiento de text selection
  UX: Previene selección accidental en elementos de UI
  ACCESIBILIDAD: Permite selección intencional de contenido textual
  PERFORMANCE: select-none puede mejorar performance en elementos interactivos
*/
.select-none { user-select: none; }  /* Sin selección - Previene selección de texto */
.select-text { user-select: text; }  /* Selección normal - Permite selección de texto */
.select-all { user-select: all; }   /* Selección completa - Selecciona todo el contenido al hacer click */
